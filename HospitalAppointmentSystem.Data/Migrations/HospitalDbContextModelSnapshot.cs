// <auto-generated />
using System;
using HospitalAppointmentSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HospitalAppointmentSystem.Data.Migrations
{
    [DbContext(typeof(HospitalDbContext))]
    partial class HospitalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HospitalAppointmentSystem.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3d6b8b41-5912-4b58-b538-57a0fe9901e9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "faad381e-b88e-4e9c-bdad-45e8a17fbc47",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Админ",
                            LastName = "Админов",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@mail.com",
                            NormalizedUserName = "admin@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEK0Y8frZNl1ieqOKrh3crbq6L3JDOW+bqUH0pxH/EzZw8lMlfoMLhOMKrd0aG5ztow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35c47275-9d0f-470c-911e-4c8cd461f897",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com"
                        },
                        new
                        {
                            Id = new Guid("69e1bf98-ab82-4240-beac-376c8d51a023"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "35e05388-8dd6-4431-9379-081210a5a2ef",
                            Email = "georgi.ivanov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Георги",
                            LastName = "Иванов",
                            LockoutEnabled = false,
                            NormalizedEmail = "georgi.ivanov@mail.com",
                            NormalizedUserName = "georgi.ivanov@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEImLVDID9N3Q48i1iAqvfUIRaPh74sHN1jJJZ/KfVwtWoaJMyDO1XbbW6urqI00H0w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9dc96852-61ac-4111-a521-0d612f77d648",
                            TwoFactorEnabled = false,
                            UserName = "georgi.ivanov@mail.com"
                        },
                        new
                        {
                            Id = new Guid("82551aa1-593d-45f0-8b71-6ef5947ca701"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b4f2997-e8ba-4f7a-b01f-0a54992fd09a",
                            Email = "elena.simeonova@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Елена",
                            LastName = "Симеонова",
                            LockoutEnabled = false,
                            NormalizedEmail = "elena.simeonova@mail.com",
                            NormalizedUserName = "elena.simeonova@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEPlUVdYBAipfz4tgd5AJvZiratJHVbrVjbwGqVH8Zyivzi10rKq+w8MGh8jm0Lp6KQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f9c85c04-59fd-46d2-ab99-8c977c21164e",
                            TwoFactorEnabled = false,
                            UserName = "elena.simeonova@mail.com"
                        },
                        new
                        {
                            Id = new Guid("450eea46-7cb1-40c6-8289-cf6fd7f8e6be"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "af31722f-3d8a-4248-bfef-72117f02e4fb",
                            Email = "ivan.petrov@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Иван",
                            LastName = "Петров",
                            LockoutEnabled = false,
                            NormalizedEmail = "ivan.petrov@mail.com",
                            NormalizedUserName = "ivan.petrov@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELTWJbnxvDpgL1NWB3tTjHwsQbrcXUqmcFnMPorBsV6jPP+eNHPfqZhfbnNN8ndRQw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1936fa1-8700-498f-8b87-2bea71affb11",
                            TwoFactorEnabled = false,
                            UserName = "ivan.petrov@mail.com"
                        },
                        new
                        {
                            Id = new Guid("afb6f444-5453-4026-8a18-35e8e797cfb8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "65695a06-7862-4d77-a4d4-aa25d2752ed9",
                            Email = "maria.georgieva@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Мария",
                            LastName = "Георгиева",
                            LockoutEnabled = false,
                            NormalizedEmail = "maria.georgieva@mail.com",
                            NormalizedUserName = "maria.georgieva@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEHGFQxRRMk5gZsa+I7bxYVsdGQYhxu9SOVeo1Oq2j6v1pgUEbTv7qpBr9r9LNdXQwQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0f1b4a13-178a-48b9-8f54-320d1378092f",
                            TwoFactorEnabled = false,
                            UserName = "maria.georgieva@mail.com"
                        });
                });

            modelBuilder.Entity("HospitalAppointmentSystem.Data.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Appointment Identifier");

                    b.Property<DateTime>("AppointmentDateTime")
                        .HasColumnType("datetime2")
                        .HasComment("Appointment date and time");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Doctor Identifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Patient Identifier");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HospitalAppointmentSystem.Data.Models.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Doctor Identifier");

                    b.Property<Guid>("SpecializationId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Specialization Identifier");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("450eea46-7cb1-40c6-8289-cf6fd7f8e6be"),
                            SpecializationId = new Guid("0b7ef214-706b-4fd2-9a22-e45d0b2eb1f4")
                        },
                        new
                        {
                            Id = new Guid("afb6f444-5453-4026-8a18-35e8e797cfb8"),
                            SpecializationId = new Guid("dd8522e7-1750-4518-ab5e-64f5c5597aca")
                        });
                });

            modelBuilder.Entity("HospitalAppointmentSystem.Data.Models.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Rating Identifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Appointment Identifier");

                    b.Property<decimal>("Attitude")
                        .HasColumnType("decimal(4,2)")
                        .HasComment("Doctor Attitude");

                    b.Property<decimal>("Professionalism")
                        .HasColumnType("decimal(4,2)")
                        .HasComment("Doctor Professionalism");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("HospitalAppointmentSystem.Data.Models.Specialization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Specialization Identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Specialization Name");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0b7ef214-706b-4fd2-9a22-e45d0b2eb1f4"),
                            Name = "Кардиолог"
                        },
                        new
                        {
                            Id = new Guid("dd8522e7-1750-4518-ab5e-64f5c5597aca"),
                            Name = "Невролог"
                        });
                });

            modelBuilder.Entity("HospitalAppointmentSystem.Data.Models.Vacation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Vacation Identifier");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Doctor Identifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Vacation End Date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasComment("Vacation Start Date");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Vacations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c883fa21-d196-4b08-b8e9-11e9b184a1af"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("92fd9b84-4722-4e0c-9807-a310f7d406a9"),
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("3d6b8b41-5912-4b58-b538-57a0fe9901e9"),
                            RoleId = new Guid("c883fa21-d196-4b08-b8e9-11e9b184a1af")
                        },
                        new
                        {
                            UserId = new Guid("69e1bf98-ab82-4240-beac-376c8d51a023"),
                            RoleId = new Guid("92fd9b84-4722-4e0c-9807-a310f7d406a9")
                        },
                        new
                        {
                            UserId = new Guid("82551aa1-593d-45f0-8b71-6ef5947ca701"),
                            RoleId = new Guid("92fd9b84-4722-4e0c-9807-a310f7d406a9")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HospitalAppointmentSystem.Data.Models.Appointment", b =>
                {
                    b.HasOne("HospitalAppointmentSystem.Data.Models.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HospitalAppointmentSystem.Data.Models.ApplicationUser", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalAppointmentSystem.Data.Models.Doctor", b =>
                {
                    b.HasOne("HospitalAppointmentSystem.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalAppointmentSystem.Data.Models.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Specialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalAppointmentSystem.Data.Models.Rating", b =>
                {
                    b.HasOne("HospitalAppointmentSystem.Data.Models.Appointment", "Appointment")
                        .WithOne("Rating")
                        .HasForeignKey("HospitalAppointmentSystem.Data.Models.Rating", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("HospitalAppointmentSystem.Data.Models.Vacation", b =>
                {
                    b.HasOne("HospitalAppointmentSystem.Data.Models.Doctor", "Doctor")
                        .WithMany("Vacations")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HospitalAppointmentSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HospitalAppointmentSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalAppointmentSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HospitalAppointmentSystem.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalAppointmentSystem.Data.Models.Appointment", b =>
                {
                    b.Navigation("Rating");
                });

            modelBuilder.Entity("HospitalAppointmentSystem.Data.Models.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Vacations");
                });

            modelBuilder.Entity("HospitalAppointmentSystem.Data.Models.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });
#pragma warning restore 612, 618
        }
    }
}
